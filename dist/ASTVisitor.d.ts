import { BaseVisitor } from './BaseVisitor';
import { ASTNode, ContextProps, NodeContext } from './types/AST';
export declare class ASTVisitor extends BaseVisitor {
    constructor();
    Program(ctx: NodeContext, props?: ContextProps): ASTNode;
    EndOfStatement(ctx: NodeContext): ASTNode;
    LibraryStatement(ctx: NodeContext): ASTNode;
    FunctionDeclaration(ctx: NodeContext): ASTNode;
    BlockStatement(ctx: NodeContext): ASTNode;
    Statement(ctx: NodeContext): ASTNode;
    ExpressionStatement(ctx: NodeContext): ASTNode;
    EmptyStatement(ctx: NodeContext): ASTNode;
    ArrayExpression(ctx: NodeContext): ASTNode;
    ObjectExpression(ctx: NodeContext): ASTNode;
    GoToStatement(ctx: NodeContext): ASTNode;
    LabeledStatement(ctx: NodeContext): ASTNode;
    Property(ctx: NodeContext): ASTNode;
    ArrayElement(ctx: NodeContext): ASTNode;
    PropertyName(ctx: NodeContext): ASTNode;
    DimStatement(ctx: NodeContext): ASTNode;
    ExitStatement(ctx: NodeContext): ASTNode;
    IfStatement(ctx: NodeContext): ASTNode;
    ElseIfStatement(ctx: NodeContext): ASTNode;
    ElseStatement(ctx: NodeContext): ASTNode;
    ForStatement(ctx: NodeContext): ASTNode;
    ForEachStatement(ctx: NodeContext): ASTNode;
    NextStatement(ctx: NodeContext): ASTNode;
    PrintStatement(ctx: NodeContext): ASTNode;
    ReturnStatement(ctx: NodeContext): ASTNode;
    StopStatement(ctx: NodeContext): ASTNode;
    WhileStatement(ctx: NodeContext): ASTNode;
    FunctionExpression(ctx: NodeContext): ASTNode;
    SubExpression(ctx: NodeContext): ASTNode;
    SubDeclaration(ctx: NodeContext): ASTNode;
    AssignmentExpression(ctx: NodeContext): ASTNode;
    AdditionExpression(ctx: NodeContext): ASTNode;
    MultiplicationExpression(ctx: NodeContext): ASTNode;
    ShiftExpression(ctx: NodeContext): ASTNode;
    RelationExpression(ctx: NodeContext): ASTNode;
    EqualityExpression(ctx: NodeContext): ASTNode;
    LogicExpression(ctx: NodeContext): ASTNode;
    UnaryExpression(ctx: NodeContext): ASTNode;
    Arguments(ctx: NodeContext): ASTNode;
    PostfixExpression(ctx: NodeContext): ASTNode;
    CallExpression({ id, args }: NodeContext): {
        arguments: any;
        callee: any;
        type: string;
        loc: {
            start: import("./types/AST").Position;
            end: import("./types/AST").Position;
            source?: string;
        };
        range?: [number, number];
    };
    ObjectMemberExpression({ id, properties }: NodeContext): ASTNode;
    MemberExpression(ctx: NodeContext): ASTNode;
    MemberChunkExpression(ctx: NodeContext): ASTNode;
    BoxMemberExpression(ctx: NodeContext): ASTNode;
    DotMemberExpression(ctx: NodeContext): ASTNode;
    PrimaryExpression(ctx: NodeContext): ASTNode;
    ParenthesisExpression(ctx: NodeContext): ASTNode;
    Literal(ctx: NodeContext): ASTNode;
    ReservedWord(ctx: NodeContext): ASTNode;
    ConditionalCompilationStatement(ctx: NodeContext): ASTNode;
    ConditionalConst(ctx: NodeContext): ASTNode;
    ConditionalError(ctx: NodeContext): ASTNode;
    ConditionalIfStatement(ctx: NodeContext): ASTNode;
    ConditionalElseIfStatement(ctx: NodeContext): ASTNode;
    ConditionalElseStatement(ctx: NodeContext): ASTNode;
    UnTypedIdentifier(ctx: NodeContext): ASTNode;
    ParameterList(ctx: NodeContext): ASTNode;
    Parameter(ctx: NodeContext): ASTNode;
    Identifier(ctx: NodeContext): ASTNode;
    TypeAnnotation(ctx: NodeContext): ASTNode;
    Comment(ctx: NodeContext): ASTNode;
}
