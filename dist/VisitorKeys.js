"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const TOKENS = require("./Tokens");
const IGNORED_TOKENS = lodash_1.mapValues(TOKENS, () => []);
const visitorKeys = Object.assign({}, IGNORED_TOKENS, { AdditionExpression: ['left', 'right', 'operator'], Arguments: ['param'], ArrayElement: ['value', 'trailingComments'], ArrayExpression: ['elements'], AssignmentExpression: ['left', 'right', 'operator'], BlockStatement: ['body'], BoxMemberExpression: ['innerExpression'], CallExpression: ['arguments', 'callee'], Comment: [], ConditionalElseStatement: ['body'], ConditionalIfStatement: ['alternate', 'body', 'test'], DotMemberExpression: ['operator', 'right'], ElseIfStatement: ['test', 'body'], ElseStatement: ['body'], EmptyStatement: [], ForEachStatement: ['countExpression', 'body'], ForStatement: ['init', 'test', 'update', 'body'], FunctionDeclaration: ['id', 'ReturnType', 'params', 'body'], FunctionExpression: ['body', 'params', 'ReturnType'], Identifier: ['asType', 'name'], IfStatement: ['test', 'consequent', 'alternate'], LibraryStatement: [], Literal: [], LogicExpression: ['operator', 'left', 'right'], MemberExpression: ['computed', 'object', 'properties'], MultiplicationExpression: ['operator', 'left', 'right'], NextStatement: [], ObjectExpression: ['properties', 'trailingComments'], Parameter: ['name', 'TypeAnnotation', 'value'], ParameterList: ['arguments'], ParenthesisExpression: ['expression'], PostfixExpression: ['operator', 'argument'], PrintStatement: ['value'], Program: ['body'], Property: ['key', 'value'], RelationExpression: ['left', 'right', 'operator'], ReturnStatement: ['argument'], StopStatement: [], SubDeclaration: ['id', 'params', 'body', 'ReturnType'], SubExpression: ['body', 'params'], TypeAnnotation: [], UnaryExpression: ['operator', 'argument'], UnTypedIdentifier: ['name'], WhileStatement: ['test', 'body'] });
exports.visitorKeys = visitorKeys;
